[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ben Raymond. Author, maintainer. Dwight Wynne. Author. Adrien Ickowicz. Author. openvolley.org. Originator.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Raymond B, Wynne D, Ickowicz (2022). volleysim: Volleyball Match Simulation Tools. R package version 0.3.6.","code":"@Manual{,   title = {volleysim: Volleyball Match Simulation Tools},   author = {Ben Raymond and Dwight Wynne and Adrien Ickowicz},   year = {2022},   note = {R package version 0.3.6}, }"},{"path":[]},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Volleyball Match Simulation Tools","text":"volleysim package provides functions simulating sets matches volleyball. simulation model can parameterized two ways: simple “sideout” parameterization. simply specify sideout rate team. can constant value (.e. average sideout rate) can provided function, allowing sideout rate vary depending whatever factors think might appropriate. (Function-based parameterization experimental: see help(\"vs_simulate_set\") information.) detailed “phase” parameterization. model, specify rates team : serve_ace (serve ace rate) serve_error (serve error rate) rec_loss_other (loss point reception-phase play, excluding reception errors attack errors — e.g. errors reception-phase sets) rec_att_error (error rate reception-phase attacks) rec_att_kill (kill rate reception-phase attacks) rec_att_replayed (rate reception-phase attacks replayed attacking team second attack: either blocked reattack, deliberately recycled block, dug defending team put back freeball) rec_no_att (proportion receptions, excluding reception errors, attack made) rec_block (block kill rate reception-phase attacks) trans_loss_other, trans_att_error, trans_att_kill, trans_att_replayed, trans_no_att, trans_block - rec_* parameters, transition phase (.e. everything reception-phase attack)","code":"options(repos = c(openvolley = \"https://openvolley.r-universe.dev\",                   CRAN = \"https://cloud.r-project.org\")) install.packages(\"volleysim\")  ## or  ## install.packages(\"remotes\") ## if needed remotes::install_github(\"openvolley/volleysim\")"},{"path":"/index.html","id":"example-1","dir":"","previous_headings":"","what":"Example 1","title":"Volleyball Match Simulation Tools","text":"given performances two teams match, expect home team won, 3-0 likely scoreline. Compare actual match result:","code":"library(volleysim) library(datavolley) library(dplyr)  ## read an example file x <- dv_read(dv_example_file())  ## calculate the rates we need to simulate rates <- vs_estimate_rates(x, target_team = \"each\")  vs_simulate_match(rates) #> $pwin #> [1] 0.9860614 #>  #> $scores #> $scores$`3-0` #> [1] 0.7094635 #>  #> $scores$`3-1` #> [1] 0.230106 #>  #> $scores$`3-2` #> [1] 0.04649198 #>  #> $scores$`2-3` #> [1] 0.009293843 #>  #> $scores$`1-3` #> [1] 0.00338111 #>  #> $scores$`0-3` #> [1] 0.001263653 summary(x) #> Match summary: #> Date: 2015-01-25 #> League: Finale mladinke #> Teams: Braslovče (JERONČIČ ZORAN/MIHALINEC DAMIJANA) #>        vs #>        Nova KBM Branik (HAFNER MATJAŽ) #> Result: 3-0 (25-16, 25-14, 25-22) #> Duration: 67 minutes"},{"path":"/index.html","id":"example-2-exploring-match-options","dir":"","previous_headings":"","what":"Example 2: exploring match options","title":"Volleyball Match Simulation Tools","text":"Let’s say two teams following season-average parameters: “team” due play “team” next match. assume teams play season-average parameters, outcome expect? Looks like expect close match, team probably going lose. Perhaps coach team adjustments make — choosing players starting lineup, match tactics. Can simulation help us explore option might beneficial? Let’s say one options substitute different pass-hitter: Betty, aggressive serve attack weaker passer starting pass-hitter Agnes. Betty lineup instead Agnes, guesstimate new team parameters : makes slight improvement. second option change serving tactics: serve aggressively order put pressure team’s reception accepting make serve errors : looks like might better option (assuming, course, estimated changes rates correctly).","code":"library(dplyr) rates <- tribble(~team, ~serve_ace, ~serve_error, ~rec_loss_other, ~rec_att_error, ~rec_att_kill, ~rec_att_replayed, ~rec_no_att, ~trans_loss_other, ~trans_att_error, ~trans_att_kill, ~trans_att_replayed, ~trans_no_att, ~rec_block, ~trans_block, \"My team\",    0.062, 0.156, 0.009, 0.071, 0.499, 0.05, 0.05, 0.018, 0.082, 0.452, 0.05, 0.08, 0.075, 0.079, \"Other team\", 0.069, 0.190, 0.014, 0.063, 0.523, 0.05, 0.05, 0.021, 0.102, 0.435, 0.05, 0.05, 0.083, 0.109) knitr::kable(rates) vs_simulate_match(rates) #> $pwin #> [1] 0.478248 #>  #> $scores #> $scores$`3-0` #> [1] 0.1159543 #>  #> $scores$`3-1` #> [1] 0.1784148 #>  #> $scores$`3-2` #> [1] 0.1838789 #>  #> $scores$`2-3` #> [1] 0.1910657 #>  #> $scores$`1-3` #> [1] 0.1965849 #>  #> $scores$`0-3` #> [1] 0.1341014 rates2 <- rates  ## increase my team's serve aces and errors by 1% each, and attack kills by 2% rates2[1, c(\"serve_ace\", \"serve_error\", \"rec_att_kill\", \"trans_att_kill\")] <-     rates2[1, c(\"serve_ace\", \"serve_error\", \"rec_att_kill\", \"trans_att_kill\")] + c(0.01, 0.01, 0.02, 0.02)  ## increase opposition serve aces by 1% rates2[2, c(\"serve_ace\")] <- rates2[2, c(\"serve_ace\")] + 0.01  vs_simulate_match(rates2) #> $pwin #> [1] 0.5305033 #>  #> $scores #> $scores$`3-0` #> [1] 0.1379761 #>  #> $scores$`3-1` #> [1] 0.2002373 #>  #> $scores$`3-2` #> [1] 0.19229 #>  #> $scores$`2-3` #> [1] 0.1822207 #>  #> $scores$`1-3` #> [1] 0.1747627 #>  #> $scores$`0-3` #> [1] 0.1125133 rates3 <- rates  ## increase my team's serve aces by 2% and errors by 5% rates3[1, c(\"serve_ace\", \"serve_error\")] <- rates3[1, c(\"serve_ace\", \"serve_error\")] + c(0.02, 0.05)  ## decrease opposition reception kills by 5% due to their expected poorer passing rates3[2, c(\"rec_att_kill\")] <- rates3[2, c(\"rec_att_kill\")] - 0.05 vs_simulate_match(rates3) #> $pwin #> [1] 0.5605252 #>  #> $scores #> $scores$`3-0` #> [1] 0.1518841 #>  #> $scores$`3-1` #> [1] 0.2127369 #>  #> $scores$`3-2` #> [1] 0.1959041 #>  #> $scores$`2-3` #> [1] 0.1760242 #>  #> $scores$`1-3` #> [1] 0.1622593 #>  #> $scores$`0-3` #> [1] 0.1011914"},{"path":"/index.html","id":"example-3","dir":"","previous_headings":"","what":"Example 3","title":"Volleyball Match Simulation Tools","text":"Let’s look another match: 2020 Austrian Women’s Volley Cup played Hartberg UVC Graz (dvw file downloaded https://www.volleynet./dvdownload/information/f-Damen/ bundled volleysim package). UVC Graz won match 3-1: Let’s see result expected given team’s actual performances match: simulations suggest Hartberg 32.8% chance winning, likely scoreline 1-3 — consistent actual result. Now let’s say two teams playing soon, Hartberg coach thinks first-ball attack improved improving passing. difference might expect match outcome improvement area? First let’s get handle relevant performance parameters. “Positive” passes means passes rated perfect positive. Hartberg made 49 positive passes (62.8% positive pass rate). made actual attack 87.8% positive passes, kill rate 41.9% attacks. overall first-ball sideout rate positive passes 36.7%. passes (excluding pass errors), Hartberg’s first-attack sideout rate 11.5%, 61.5% passes leading attack, kill rate 18.8% attacks. Let’s say focused training, Hartberg coach thinks positive pass rate can substantially increased, 62.8% 75%. change reception attack kill rate, attacks made positive passes. expected reception attack kill rate weighted average kill rates positive passes (weights relative numbers positive passes). , hypothesized better passing performance expect modest increase overall reception attack kill rate 37.5% (35.6%). Armed estimate, can explore effect might re-match: Giving match win probability 36.6% (32.8%).","code":"x <- dv_read(vs_example_file()) summary(x) #> Match summary: #> Date: 2020-11-08 #> League: Austrian Volley Cup Women 2020/21 - DCup #> Teams: Hartberg w Cup (BEINSEN Birgit/ALMER Katharina) #>        vs #>        UVC Graz w Cup (PACK Matthias/APPEL Martin) #> Result: 1-3 (21-25, 21-25, 25-20, 15-25) #> Duration: 88 minutes rates <- list(vs_estimate_rates(x, target_team = home_team(x)),               vs_estimate_rates(x, target_team = visiting_team(x))) sim_result <- vs_simulate_match(rates = rates) sim_result #> $pwin #> [1] 0.3275444 #>  #> $scores #> $scores$`3-0` #> [1] 0.0647837 #>  #> $scores$`3-1` #> [1] 0.1163446 #>  #> $scores$`3-2` #> [1] 0.1464161 #>  #> $scores$`2-3` #> [1] 0.2003236 #>  #> $scores$`1-3` #> [1] 0.2581142 #>  #> $scores$`0-3` #> [1] 0.2140178 ## extract the play-by-play data xp <- plays(x)  ## identify first-ball attacks fba <- xp %>% dplyr::filter(skill == \"Attack\" & phase == \"Reception\") %>%     mutate(made_attack = TRUE, fbso = evaluation == \"Winning attack\") %>%     dplyr::select(point_id, team, made_attack, fbso)  ## join that back to the full play-by-play data xp <- left_join(xp, fba, by = c(\"point_id\", \"team\")) %>%     mutate(fbso = if_else(is.na(fbso), FALSE, fbso),            made_attack = if_else(is.na(made_attack), FALSE, made_attack))  ## and pass quality on each rally pq <- xp %>% dplyr::filter(skill == \"Reception\") %>% group_by(point_id) %>%     dplyr::summarize(pass_quality = case_when(n() == 1 ~ evaluation)) xp <- left_join(xp, pq, by = \"point_id\") %>%     mutate(pass_quality = case_when(grepl(\"Perfect|Positive\", pass_quality) ~ \"Positive\",                                     grepl(\"Error\", pass_quality) ~ \"Error\",                                     TRUE ~ \"Other\"))  ## finally summarize the first-ball attacks by pass quality fb_summary <- xp %>% dplyr::filter(skill == \"Reception\" & team == home_team(x)) %>%     group_by(pass_quality) %>% dplyr::summarize(N = n(),                                                 `Attack %` = mean(made_attack)*100,                                                 `Attack kill %` = mean(fbso[made_attack])*100,                                                 `FBSO%` = mean(fbso)*100) fb_summary #> # A tibble: 3 × 5 #>   pass_quality     N `Attack %` `Attack kill %` `FBSO%` #>   <chr>        <int>      <dbl>           <dbl>   <dbl> #> 1 Error            3        0             NaN       0   #> 2 Other           26       61.5            18.8    11.5 #> 3 Positive        49       87.8            41.9    36.7 new_positive_pass_rate <- 0.75 attack_rate_pos <- new_positive_pass_rate * 0.878 attack_rate_other <- (1 - new_positive_pass_rate) * 0.615 new_rec_att_kill <- (attack_rate_pos * 0.419 + ## positive pass rate multiplied by their corresponding kill rate                      attack_rate_other * 0.188 ## attack rate on other passes * their kill rate                      ) / (attack_rate_pos + attack_rate_other) new_rec_att_kill #> [1] 0.3752742 rates[[1]]$rec_att_kill <- new_rec_att_kill new_sim_result <- vs_simulate_match(rates = rates) new_sim_result #> $pwin #> [1] 0.3664445 #>  #> $scores #> $scores$`3-0` #> [1] 0.07649556 #>  #> $scores$`3-1` #> [1] 0.132131 #>  #> $scores$`3-2` #> [1] 0.157818 #>  #> $scores$`2-3` #> [1] 0.2004959 #>  #> $scores$`1-3` #> [1] 0.2426869 #>  #> $scores$`0-3` #> [1] 0.1903727"},{"path":"/reference/volleysim.html","id":null,"dir":"Reference","previous_headings":"","what":"volleysim — volleysim","title":"volleysim — volleysim","text":"Functions simulating volleyball match outcomes.","code":""},{"path":"/reference/vs_estimate_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate parameters required for simulation — vs_estimate_rates","title":"Estimate parameters required for simulation — vs_estimate_rates","text":"Estimate parameters required simulation","code":""},{"path":"/reference/vs_estimate_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate parameters required for simulation — vs_estimate_rates","text":"","code":"vs_estimate_rates(   x,   target_team,   by = \"none\",   moderate = TRUE,   process_model = \"all\" )"},{"path":"/reference/vs_estimate_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate parameters required for simulation — vs_estimate_rates","text":"x datavolleyplays: plays component datavolley object returned datavolley::dv_read() target_team string: team name calculate rates . missing NULL, rates calculated across entire data.frame x. target_team \"\", rates calculated team separately string: grouping calculate rates . Either \"none\" (calculate whole-data set rates), \"match\" (match), \"set\" (match set) moderate logical: TRUE, apply checks attempt ensure estimated rates reasonable. Currently checks include: setting error rates limited maximum 5%. scouts include setting actions, except errors otherwise exceptional, can lead unrealistic estimates setting error rates process_model string: estimate rates required process model? Either \"sideout\", \"phase\", \"\"","code":""},{"path":"/reference/vs_estimate_rates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate parameters required for simulation — vs_estimate_rates","text":"tibble, columns match_id (\"match\"), set_number (\"set\"), (target_team \"\") \"team\". remaining columns depend process_model: \"sideout\", column sideout. process_model \"phase\" additionally columns serve_ace, serve_error, rec_loss_other, rec_att_error, rec_att_kill, rec_att_replayed, rec_no_att, rec_block, trans_loss_other, trans_att_error, trans_att_kill, trans_att_replayed, trans_no_att, trans_block","code":""},{"path":[]},{"path":"/reference/vs_estimate_rates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate parameters required for simulation — vs_estimate_rates","text":"","code":"if (FALSE) {   library(datavolley)   x <- dv_read(dv_example_file())   rates <- vs_estimate_rates(x, target_team = \"each\")    vs_simulate_set(rates) ## simulate a single set   vs_simulate_match(rates) ## simulate a match   ## so given the performances of the two teams during that match, we expect   ##  that the home team should have won, with 3-0 being the most likely scoreline    ## compare to the actual match result   summary(x) }"},{"path":"/reference/vs_example_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Example DataVolley files provided as part of the volleysim package — vs_example_file","title":"Example DataVolley files provided as part of the volleysim package — vs_example_file","text":"Example DataVolley files provided part volleysim package","code":""},{"path":"/reference/vs_example_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example DataVolley files provided as part of the volleysim package — vs_example_file","text":"","code":"vs_example_file(choice = 1)"},{"path":"/reference/vs_example_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example DataVolley files provided as part of the volleysim package — vs_example_file","text":"choice numeric: data file return? 1 - 2020 Austrian Women's Volley Cup played Hartberg UVC Graz","code":""},{"path":"/reference/vs_example_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example DataVolley files provided as part of the volleysim package — vs_example_file","text":"path file","code":""},{"path":"/reference/vs_example_file.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example DataVolley files provided as part of the volleysim package — vs_example_file","text":"example data files came https://www.volleynet./dvdownload/information/f-Damen/","code":""},{"path":[]},{"path":"/reference/vs_example_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example DataVolley files provided as part of the volleysim package — vs_example_file","text":"","code":"if (FALSE) {   myfile <- vs_example_file()   x <- datavolley::dv_read(myfile)   summary(x) }"},{"path":"/reference/vs_match_win_probability.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a win probability graph for a match — vs_match_win_probability","title":"Create a win probability graph for a match — vs_match_win_probability","text":"Create win probability graph match","code":""},{"path":"/reference/vs_match_win_probability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a win probability graph for a match — vs_match_win_probability","text":"","code":"vs_match_win_probability(   pbp,   so,   go_to = 25,   go_to_tiebreak = 15,   max_sets = 5,   show_plot = TRUE,   home_color = \"blue\",   visiting_color = \"darkred\" )"},{"path":"/reference/vs_match_win_probability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a win probability graph for a match — vs_match_win_probability","text":"pbp data frame: data frame containing set number, home team, visiting team, serving team, point-winning team, home team score, visiting team score end point, easiest obtain subsetting plays component datavolley object returned datavolley::dv_read() include rows point == TRUE integer: two-element vector sideout rates home team visiting team, easiest obtain using vs_estimate_rates() go_to integer: minimum score must reached end non-tiebreaker set (typically 25 indoor volleyball sets 1 4, 21 beach volleyball) go_to_tiebreak integer: minimum score must reached end tiebreaker set (typically 15) max_sets integer: maximum number sets can played, either 3 5 show_plot logical: TRUE, produce graph showing home team's win probability point match home_color string: color used indicate points match home team favored win visiting_color string: home_color, visiting team","code":""},{"path":"/reference/vs_match_win_probability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a win probability graph for a match — vs_match_win_probability","text":"data frame containing home team's probability winning set (set_probs) match (match_probs) point set. first row data frame refers start match (0-0, Set 1).","code":""},{"path":"/reference/vs_match_win_probability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a win probability graph for a match — vs_match_win_probability","text":"","code":"if (FALSE) {   library(datavolley)   x <- dv_read(vs_example_file())   sideout_rates <- vs_estimate_rates(x, target_team = \"each\")$sideout   play_by_play <- subset(plays(x), point)      vs_match_win_probability(play_by_play, sideout_rates)  ## data frame is not printed to console   ## but can be stored in a variable   match_win_probs <- vs_match_win_probability(play_by_play, sideout_rates) }"},{"path":"/reference/vs_simulate_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a volleyball match — vs_simulate_match","title":"Simulate a volleyball match — vs_simulate_match","text":"Simulate volleyball match using either best--5 best--3 scoring","code":""},{"path":"/reference/vs_simulate_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a volleyball match — vs_simulate_match","text":"","code":"vs_simulate_match(   rates,   process_model = \"phase\",   serving = NA,   serving5 = NA,   max_sets = 5,   go_to = 25,   go_to5 = 15,   n = 2000,   simple = TRUE,   method = \"theoretical\" )  vs_simulate_match_mc(...)  vs_simulate_match_theor(...)  vs_simulate_match_beach(...)"},{"path":"/reference/vs_simulate_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a volleyball match — vs_simulate_match","text":"rates list: two-element list, element set rates returned vs_estimate_rates process_model string: either \"sideout\" \"phase\". See vs_estimate_rates() serving logical: TRUE, team 1 serve first match. NA, team serving first chosen random serving5 logical: TRUE, team 1 serve first tiebreaking set (match gets far). NA, team serving first set chosen random max_sets integer: maximum number sets played (either 3 5) go_to integer: minimum score must reached end set (typically 25 indoor volleyball sets 1 4, 15 set 5, 21 beach volleyball) go_to5 integer: minimum score must reached end tiebreaker set (typically 15 indoor volleyball) n integer: number simulations run simple logical: TRUE, just return probability team winning probabilities possible set score. FALSE, return extra details named list. details differ method = \"monte carlo\" method = \"theoretical\" method string: simulation method use. Either \"monte carlo\" \"theoretical\". Details TBD ... parameters vs_simulate_match. vs_simulate_match_theor vs_simulate_match_mc convenience functions vs_simulate_match(..., method = \"theoretical\") vs_simulate_match(..., method = \"monte carlo\") respectively. vs_simulate_match_beach convenience function  vs_simulate_match(..., max_sets = 3, go_to = 21, go_to5 = 21) (typical beach volleyball settings).","code":""},{"path":[]},{"path":"/reference/vs_simulate_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a volleyball match — vs_simulate_match","text":"","code":"if (FALSE) {   library(datavolley)   x <- dv_read(dv_example_file())   rates <- vs_estimate_rates(x, target_team = \"each\")    vs_simulate_set(rates) ## simulate a single set   vs_simulate_match(rates) ## simulate a match   ## so given the performances of the two teams during that match, we expect   ##  that the home team should have won, with 3-0 being the most likely scoreline    ## compare to the actual match result   summary(x) }"},{"path":"/reference/vs_simulate_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a set of volleyball — vs_simulate_set","title":"Simulate a set of volleyball — vs_simulate_set","text":"vs_simulate_set_theor vs_simulate_set_mc convenience functions vs_simulate_set(..., method = \"theoretical\") vs_simulate_set(..., method = \"monte carlo\") respectively.","code":""},{"path":"/reference/vs_simulate_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a set of volleyball — vs_simulate_set","text":"","code":"vs_simulate_set(   rates,   process_model = \"phase\",   serving = NA,   go_to = 25,   simple = FALSE,   id = NULL,   method = \"theoretical\" )  vs_simulate_set_mc(...)  vs_simulate_set_theor(...)"},{"path":"/reference/vs_simulate_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a set of volleyball — vs_simulate_set","text":"rates list: two-element list, element set rates returned vs_estimate_rates. Experimental: process_model \"sideout\", sideout rate component can function. function called step simulation parameters: team_1_score - score team 1 point set far team_2_score - score team 2 point set far team_1_rotation - rotation team 1 point set far (rotations counted relative team's starting rotation, 1) team_2_rotation - rotation team 2 point set far (rotations counted relative team's starting rotation, 1) serving - serving team 1 2 point set far point_won_by - team won point set far (NA last entry, current point simulated yet) outcome - outcome point set far, either \"Sideout\" \"Breakpoint\" process_model \"sideout\", details TBD process_model \"phase\" function return sideout rate receiving team. process_model string: either \"sideout\" \"phase\". \"sideout\" model uses estimated sideout rates (rates object) directly. \"phase\" model breaks play different phases (serve, serve receive, etc) uses rates associated separate phases serving logical: TRUE, team 1 serve first. NA, team serving first chosen random go_to integer: minimum score must reached end set (typically 25 indoor volleyball sets 1 4, 15 set 5, 21 beach volleyball) simple logical: TRUE, return simplified output. applicable method \"monte carlo\". simple = TRUE, return team (1 2) won set. simple = FALSE, return extra details data.frame id : optional value (non-NULL) returned id column returned data frame, simple FALSE method string: simulation method use. Either \"monte carlo\" \"theoretical\". Details TBD ... : parameters vs_simulate_set. vs_simulate_set_theor vs_simulate_set_mc convenience functions vs_simulate_set(..., method = \"theoretical\") vs_simulate_set(..., method = \"monte carlo\") respectively","code":""},{"path":"/reference/vs_simulate_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a set of volleyball — vs_simulate_set","text":"Integer (1 2) data frame, depending value simple","code":""},{"path":[]},{"path":"/reference/vs_simulate_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a set of volleyball — vs_simulate_set","text":"","code":"if (FALSE) {   library(datavolley)   x <- dv_read(dv_example_file())   rates <- vs_estimate_rates(x, target_team = \"each\")    vs_simulate_set(rates) ## simulate a single set   vs_simulate_match(rates) ## simulate a match   ## so given the performances of the two teams during that match, we expect   ##  that the home team should have won, with 3-0 being the most likely scoreline    ## compare to the actual match result   summary(x) }  ## sideout rates as a function for team 2 sofun2 <- function(serving, point_won_by, ...) {     ## if team 2 won their previous sideout opportunity, their sideout rate is 0.6     ## otherwise it's 0.5     prevso <- tail(na.omit(point_won_by[serving == 1]), 1)     if (length(prevso) < 1 || prevso == 1) {         ## first sideout opportunity or lost the last one         0.5     } else {         0.6     } }  rates <- list(list(sideout = 0.55), ## first team has constant 55% sideout rate                list(sideout = sofun2)) ## function for team 2's sideout rate  ## need to use method = \"monte carlo\" for this vs_simulate_set(rates = rates, process_model = \"sideout\", method = \"monte carlo\") #>    team_1_score team_2_score team_1_rotation team_2_rotation serving #> 1             0            0               1               1       1 #> 2             1            0               1               1       1 #> 3             2            0               1               1       1 #> 4             2            1               1               2       2 #> 5             2            2               1               2       2 #> 6             3            2               2               2       1 #> 7             4            2               2               2       1 #> 8             4            3               2               3       2 #> 9             4            4               2               3       2 #> 10            5            4               3               3       1 #> 11            5            5               3               4       2 #> 12            6            5               4               4       1 #> 13            7            5               4               4       1 #> 14            8            5               4               4       1 #> 15            9            5               4               4       1 #> 16            9            6               4               5       2 #> 17           10            6               5               5       1 #> 18           11            6               5               5       1 #> 19           11            7               5               6       2 #> 20           12            7               6               6       1 #> 21           13            7               6               6       1 #> 22           13            8               6               1       2 #> 23           13            9               6               1       2 #> 24           14            9               1               1       1 #> 25           14           10               1               2       2 #> 26           15           10               2               2       1 #> 27           16           10               2               2       1 #> 28           17           10               2               2       1 #> 29           17           11               2               3       2 #> 30           17           12               2               3       2 #> 31           18           12               3               3       1 #> 32           19           12               3               3       1 #> 33           20           12               3               3       1 #> 34           21           12               3               3       1 #> 35           21           13               3               4       2 #> 36           22           13               4               4       1 #> 37           23           13               4               4       1 #> 38           23           14               4               5       2 #> 39           24           14               5               5       1 #>    point_won_by set_won_by    outcome #> 1             1          1 Breakpoint #> 2             1          1 Breakpoint #> 3             2          1    Sideout #> 4             2          1 Breakpoint #> 5             1          1    Sideout #> 6             1          1 Breakpoint #> 7             2          1    Sideout #> 8             2          1 Breakpoint #> 9             1          1    Sideout #> 10            2          1    Sideout #> 11            1          1    Sideout #> 12            1          1 Breakpoint #> 13            1          1 Breakpoint #> 14            1          1 Breakpoint #> 15            2          1    Sideout #> 16            1          1    Sideout #> 17            1          1 Breakpoint #> 18            2          1    Sideout #> 19            1          1    Sideout #> 20            1          1 Breakpoint #> 21            2          1    Sideout #> 22            2          1 Breakpoint #> 23            1          1    Sideout #> 24            2          1    Sideout #> 25            1          1    Sideout #> 26            1          1 Breakpoint #> 27            1          1 Breakpoint #> 28            2          1    Sideout #> 29            2          1 Breakpoint #> 30            1          1    Sideout #> 31            1          1 Breakpoint #> 32            1          1 Breakpoint #> 33            1          1 Breakpoint #> 34            2          1    Sideout #> 35            1          1    Sideout #> 36            1          1 Breakpoint #> 37            2          1    Sideout #> 38            1          1    Sideout #> 39            1          1 Breakpoint"},{"path":"/reference/vs_theoretical_sideout_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate theoretical sideout rates given 'phase' parameters — vs_theoretical_sideout_rates","title":"Estimate theoretical sideout rates given 'phase' parameters — vs_theoretical_sideout_rates","text":"vs_estimate_rates() function returns team's performance rates across range aspects play, including serve ace rate, serve error rate, . Using vs_theoretical_sideout_rates() can estimate theoretical sideout rate expect see, given parameters. can compared actual sideout rate achieved team.","code":""},{"path":"/reference/vs_theoretical_sideout_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate theoretical sideout rates given 'phase' parameters — vs_theoretical_sideout_rates","text":"","code":"vs_theoretical_sideout_rates(rates, process_model = \"phase\")"},{"path":"/reference/vs_theoretical_sideout_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate theoretical sideout rates given 'phase' parameters — vs_theoretical_sideout_rates","text":"rates list: rates returned vs_estimate_rates() process_model string: currently \"phase\". See vs_estimate_rates()","code":""},{"path":"/reference/vs_theoretical_sideout_rates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate theoretical sideout rates given 'phase' parameters — vs_theoretical_sideout_rates","text":"theoretical sideout rates two teams","code":""},{"path":[]},{"path":"/reference/vs_theoretical_sideout_rates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate theoretical sideout rates given 'phase' parameters — vs_theoretical_sideout_rates","text":"","code":"if (FALSE) {   library(datavolley)   x <- dv_read(dv_example_file())   rates <- list(vs_estimate_rates(x, target_team = home_team(x)),                 vs_estimate_rates(x, target_team = visiting_team(x)))    ## the theoretical sideout rates   vs_theoretical_sideout_rates(rates)    ## compare to their actual sideout rates   c(rates[[1]]$sideout, rates[[2]]$sideout) }"}]
